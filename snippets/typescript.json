{
  "esr": {
    "prefix": "esr",
    // "body": "eval(String.raw`$0`)"
    "body": "eval(String.raw`($0)`)"
    // "body": "eval(String.raw`\n$0\n`)"
    // "body": "eval(String.raw`\n($0)\n`)"
  },
  "dm": {
    "prefix": "dm",
    "body": "declare module "
  },
  "sm": {
    "prefix": "sm",
    "body": "{ $1 }: { $1: $0 }"
  },
  // self 不设置 snippet
  // "cs": {
  //   "prefix": "cs",
  //   // const self = await getSelf()
  //   "body": "const self"
  // },
  // "se": {
  //   "prefix": "se",

  //   //            const self = await getSelf()
  //   // where: { UserId: self.id },

  //   "body": "self"
  // },
  "ksa": {
    "prefix": "ksa",
    "body": "[key: string]: any"
  },
  "nrs": {
  "prefix": "nrs",
  "body": "new RegExp(String.raw`$0`)"
  },
  "ta": {
    "prefix": "ta",
    // "body": "type $0 = any"
    "body": "type ${0:aa} = any"
  },
  "epi": {
    "prefix": "epi",
    "body": "extends Promise<infer V>"
  },
  "epa": {
    "prefix": "epa",
    "body": "extends Promise<any>"
  },
  // "kk": {
  //   "prefix": "kk",
  //   "body": "[$0](${$1})"
  // },
  "im": {
    "prefix": "im",
    "body": "implements "
  },
  // "nci": {
  //   "prefix": "nci",
  //   // "body": ["new (class implements vscode.HoverProvider {", "\t$0", "})()"]
  //   "body": ["new (class implements $0 {", "})()"]
  // },
  // "tcf": {
  //   "prefix": "tcf",
  //   "body": ["\t.then(console.log)", "\t.catch(console.error)", "\t.finally(() => client.close())"]
  // },
  "anp": {
    "prefix": "anp",
    // await new Promise<void>((resolve) => { 类型用 ctrl+. 补
    // 是否需要`reject` 需补充用例

    // "body": "await new Promise((${1:resolve}) => $0)"
    "body": "await new Promise((resolve) => {\n\t$0\n})"
    // "body": "${1|await new Promise,await new Promise<void>|}((resolve) => $0)"
  },
  "slp": {
    "prefix": "slp",
    "body": "await new Promise((r) => setTimeout(r, ${0:2000}))"
  },
  "slpp": {
    "prefix": "slpp",
    "body": ["async function slp(n = 2000) {", "\tawait new Promise((r) => setTimeout(r, n))", "}"]
  },
  "ne": {
    "prefix": "ne",
    "body": "new Error($0)"
  },
  "rn": {
    "prefix": "rn",
    "body": "return new "
  },
  "us": {
    "prefix": "us",
    "body": "'use server'\n"
  },

  "ei": {
    "prefix": "ei",
    "body": "export interface "
    // 有`[`还是算了
    // "body": "${1|export interface,extends [infer|} "
    // "body": "${1|export interface,extends [infer $0]|} "
  },
  // "re": {
  //   "prefix": "re",
  //   // module: require.resolve('./context'),
  //   "body": "require."
  // },
  "ql": {
    "prefix": "ql",
    "body": "`#graphql\n\t$0\n`\n"
  },
  "ub": {
    "prefix": "ub",
    // "body": "#!/usr/bin/env node"
    "body": "#!/usr/bin/env ${1|node,zx|}"
  },
  "aii": {
    "prefix": "aii",
    // await import('./experimental.js')
    "body": "await import('$0')"
  },

  "i": {
    "prefix": "i",

    // import 'zx/globals' 带引号参数
    // import('./chalk.js')  可此例是先括号再引号参数
    // const g = await import(pathToFileURL(src)) 先括号, 里面还有普通参数

    // import' 不带空格'不会成对出现
    // "body": "import"
    "body": "import "
  },

  "az": {
    "prefix": "az",
    // const RE_BLOCK_NAME = /^[a-zA-Z$][\w\.$-_]+/
    "body": "a-zA-Z"
  },
  "named capturing group": {
    "prefix": "cg",
    // /\bimport\s+['"](?<path>[^'"]+)['"]/,
    "body": "(?<$1>$0)"
  },
  "tn": {
    "prefix": "tn",
    // throw err;
    // throw new Error('cannot get uid or gid')
    // "body": "throw ${1:new Error}"

    // throw new NotFoundException('User Not Found')
    "body": "throw new "
  },

  "sw": {
    "prefix": "sw",
    // break 不一定需要
    //   case 'CredentialsSignin':
    // return 'Invalid credentials.'

    "body": "switch ($1) {\n\tcase $0:\n\t\tbreak\n}"
  },
  "w": {
    "prefix": "w",
    // } while (arr.some((v: any) => v?.then)) 不带大括号
    // "body": "while ($0)"
    "body": "while ($0) {\n}"
  },

  "if": {
    "prefix": "if",
    "body": "if ($0) {\n}"
  },
  // "of": {
  //   "prefix": "of",
  //   // "body": "$1 ($2) {\n\t\n}," 类方法不必加 ,

  //   // "body": "$1 ($0) {\n\t\n}" 跟 if 一样不要空行
  //   "body": "$1 ($0) {\n}"
  // },
  // "aof": {
  //   "prefix": "aof",
  //   // "body": "$1 ($2) {\n\t\n}," 类方法不必加 ,

  //   // "body": "$1 ($0) {\n\t\n}" 跟 if 一样不要空行
  //   "body": "async $1 ($0) {\n}"
  // },
  "er": {
    "prefix": "er",
    "body": "extends readonly "
  },
  "el": {
    "prefix": "el",
    "body": "else {\n\t$0\n}"
  },
  "eif": {
    "prefix": "eif",
    "body": "else if ($0) {\n}"
  },
  "ag": {
    "prefix": "ag",

    // type S=(pieces:any,...args:any[]) => P 带了 `:any[]`
    // value = fn(...args).catch((err) => {   什么都没带
    "body": "...args"
  },
  "agi": {
    "prefix": "agi",
    "body": "...args: infer "
  },
  "uti": {
    "prefix": "uti",
    "body": [
      "type UnionToIntersection<U> = (U extends U ? (x: U) => unknown : never) extends (x: infer R) => unknown",
      "\t? R",
      "\t: never"
    ]
  },
  "un": {
    "prefix": "un",
    // unknown ? R : never
    // unknown : never
    "body": "unknown $0: never"
  },
  "aa": {
    "prefix": "aa",
    "body": "as any"
  },
  "ac": {
    "prefix": "ac",
    "body": "as const"
  },
  // "x": {
  //   "prefix": "x",
  //   "body": "'${$1}'"
  // },

  // "z": {
  //   "prefix": "z",
  //   // 留一个空格好 ${} 插变量
  //   // 配合 x 就不需要了
  //   "body": "process.stderr.write(`$0\\n`)"
  //   // "body": ["/*\n$0", "*/"]
  // },
  // "sa": {
  //   "prefix": "sa",
  //   // "body": "satisfies "
  //   "body": ["{", "\t$0", "} satisfies NextAuthConfig"]
  // },
  // "uu": {
  //   "prefix": "uu",
  //   "body": "#!/usr/bin/env node\n"
  // },
  "k": {
    "prefix": "k",
    // type RequiredKeys<T, K = keyof T> = K
    "body": "keyof "
  },
  "v": {
    "prefix": "v",
    "body": "type "
  },
  "ab": {
    "prefix": "ab",
    "body": "abstract "
  },
  "anoy": {
    "prefix": "aj",
    "body": ["async ($1) => {$0}"]
  },
  "Object": {
    "prefix": "o",
    "body": "object"
  },
  "bk": {
    "prefix": "kb",
    "body": "break"
  },
  // git log --pretty=oneline --abbrev-commit
  "u": {
    "prefix": "u",
    "body": "unknown"
  },
  "cj": {
    "prefix": "cj",
    // [] 没意义, 数组解构又没有属性提示
    "body": "const {$0} = $1"
    // "body": "${1|const,let|} {$0} = $2"
  },
  "lj": {
    "prefix": "lj",
    "body": "let {$0} = $1"
  },
  "prr": {
    "prefix": "prr",
    "body": "private readonly "
  },
  "th": {
    "prefix": "th",
    "body": "this."
  },
  "rt": {
    "prefix": "rt",
    // return this.users.filter((user) => user.role === role)
    "body": "return this."
  },

  "ry": {
    "prefix": "ry",
    "body": "readonly "
  },
  "interface ": {
    "prefix": "it",
    "body": "interface "
  },
  // "ff": {
  //   "prefix": "ff",
  //   "body": "function"
  // },

  "s": {
    "prefix": "s",
    "body": "string"
  },
  "tc": {
    "prefix": "tc",
    "body": "// @ts-nocheck\n"
  },
  "cb": {
    "prefix": "cb",

    // 因为存在多`case`的可能, 所以 break 应设为可选
    // 但在实际操作中会直接复制一行下来 向下复制行
    // case 'stdout':
    // case 'stderr':
    //   if (!entry.verbose) return

    // "body": ["case $0:${1:\n\tbreak}"]
    "body": ["case $0:", "\tbreak"]
  },
  // "pas": {
  //   "prefix": "pas",
  //   "body": "process.argv.slice(2)"
  // },
  "tyc": {
    "prefix": "tyc",
    // } catch {

    // "body": "if $2${1| ,;|} err != nil {\n\n}\n"
    // "body": "try {\n\t$0\n} catch ${1:(error)} {\n\n}\n"
    // "body": "try {\n\t$0\n} catch (${1:error}) {\n\n}\n"
    "body": "try {\n\t$0\n} catch (error) {\n\t\n}\n"
    // "body": "try {\n\t$0\n} catch ${1|(error), |} {\n\n}\n"
  },
  "rf": {
    "prefix": "rf",
    "body": "return false"
  },
  "na": {
    "prefix": "na",
    "body": "new Array($0)"
  },
  "ent": {
    "prefix": "ent",
    "body": "extends number ? true : false"
  },
  "tne": {
    "prefix": "tne",
    // throw new Error(`Network Error: ${e.message}`)
    "body": "throw new Error($0)"
  },
  "tyf": {
    "prefix": "tyf",
    "body": "try {\n\t$0\n} finally {\n\n}\n"
  },

  "eaf": {
    "prefix": "eaf",
    "body": "export async function $0 {\n}"
  },
  // export async function  () {
  // }

  "bl": {
    "prefix": "bo",
    "body": "boolean"
  },
  "ers": {
    "prefix": "ers",
    "body": "extends readonly string[]"
  },
  "erk": {
    "prefix": "erk",
    "body": "extends readonly (keyof any)[]"
  },
  "era": {
    "prefix": "era",
    // type A<T extends readonly any[]> = T extends
    "body": "extends readonly any[]"
  },
  "eu": {
    "prefix": "eu",
    "body": "extends unknown[]"
  },
  "eb": {
    "prefix": "eb",
    "body": "extends boolean"
  },
  "ef": {
    "prefix": "ef",
    "body": "${1|export function,extends Function,extends false|} "
    // "body": "${1|export * from,export function,extends Function,extends false|} "
  },
  "et": {
    "prefix": "et",
    // "body": "${1|extends,export type,extends true|} "
    "body": "extends "
  },
  "ek": {
    "prefix": "ek",
    "body": "extends keyof "
  },
  "eka": {
    "prefix": "eka",
    "body": "extends keyof any"
  },
  "rsa": {
    "prefix": "rsa",
    "body": "Record<string, any>"
  },

  "xi": {
    "prefix": "xi",
    "body": "type Xian<O extends Record<string, any>> = { [K in keyof O]: O[K] }"
  },
  "p": {
    "prefix": "p",
    // const aa = Promise.race([Promise.resolve(1)])
    // (values: T): Promise<Awaited<T[number]>> 不要带`.`

    // "body": "Promise."
    "body": "Promise"
  },
  "pv": {
    "prefix": "pv",
    // 应为 1 个参数，但得到的却是 0 个。你是否忘了将类型参数中的 "void" 包含到 "Promise"
    // resolve()

    "body": ": Promise<void>"
  },
  "ik": {
    "prefix": "ik",
    "body": "in keyof "
  },

  "zs": {
    // type GenerateType<K extends string> = { 不同约束类型
    //   [Key in K]: {
    //     [Key2 in Key]: 'desc' | 'asc'
    //   }
    // }
    "prefix": "zs",
    "body": ["type ${0:aa}<T extends string> = {", "\t[P in T]: P", "}\n"]
  },

  "zn": {
    "prefix": "zn",
    // type aa<          T extends any[]> = { 不同约束类型
    //   [P in T[number]]: P
    // }
    "body": ["type ${0:aa}<T extends any[]> = {", "\t[P in T[number]]: P", "}\n"]
  },
  "zo": {
    "prefix": "zo",

    // "body": ["type ${0:aa}<O> = {", "\t[K in keyof O]: O[K]", "}\n"]
    "body": ["type ${0:aa}<O> = {", "\t[K in keyof O    ]: O[K]", "}\n"]

    // -------------------------------------------------------------
    // type GetOptional<O> = {
    //   [K in keyof O]: O[K]
    // } 补上这个

    // type c = GetOptional<{ foo: number; bar?: string }> 先有这个
    // -------------------------------------------------------------
    // "body": ["type ${1:aa}<O> = {", "\t[K in keyof O]: O[K]", "}\n\n"]

    // "body": [
    //   "type a${CURRENT_SECOND}<O> = {",
    //   "\t[K in keyof O]: O[K]",
    //   "}\n\n"
    // ]
    // "body": ["{\n\t[K in ${1:keyof }$0]: ", "}"]
    // "body": ["{\n\t[K in ${1|keyof T,T[number]|}]: T[K]", "}"]
  },
  // "etp": {
  //   "prefix": "etp",
  //   "body": "extends Pick<$0>"
  // },
  "eru": {
    "prefix": "eru",
    "body": "extends readonly unknown[]"
  },
  "st": {
    "prefix": "st",
    "body": "static "
  },
  "en": {
    "prefix": "en",
    "body": "extends number"
  },
  "es": {
    "prefix": "es",
    "body": "extends string"
  },
  "ea": {
    "prefix": "ea",
    "body": "extends any[]"
  },

  "fu": {
    "prefix": "fu",
    // declare function PromiseAll<T extends readonly unknown[] | []>(

    // interface Fuck {
    //   aa: Function 大写的才能用作类型

    "body": "function "
    // "body": "function${1: }"
    // "body": "${1|function ,function|}"
  },

  "tf": {
    "prefix": "tf",
    "body": "? true : false"
  },
  "ft": {
    "prefix": "ft",
    "body": "? false : true"
  },
  "ka": {
    "prefix": "ka",
    "body": "keyof any"
  },
  "at": {
    "prefix": "at",
    "body": "as typeof "
  },
  // "cc": {
  //   "prefix": "cc",
  //   // "body": "fuck ${1:TM_SELECTED_TEXT}"
  //   "body": "fuck $TM_SELECTED_TEXT"
  // },
  "aea": {
    "prefix": "aea",
    "body": "any extends any ? $TM_SELECTED_TEXT : never"
  },
  // "ean": {
  //   "prefix": "ean",
  //   "body": ["extends any ? $0", "\t: never\n"]
  // },

  "akt": {
    "prefix": "akt",
    "body": "as keyof typeof "
  },
  "df": {
    "prefix": "df",
    // 留个空格好接 snippet
    // "body": "${1|declare function ,default|}"
    "body": "declare function "
  },

  "d": {
    "prefix": "d",
    // d 特指 declare
    "body": "declare "
  },
  "dg": {
    "prefix": "dg",
    "body": "declare global "
  },

  "dc": {
    "prefix": "dc",
    "body": "declare const "
  },
  "dl": {
    "prefix": "dl",
    "body": "declare let "
  },

  // "dv": {
  //   "prefix": "dv",
  //   "body": "declare type "
  // },

  "e": {
    "prefix": "e",
    // e 特指 export
    "body": "export "
    // "body": "${1|extends,export|} "
  },
  "ed": {
    "prefix": "ed",
    "body": "export default "
  },
  "ipa": {
    "prefix": "ipa",
    // import {Button} from '@/components/ui/button'
    "body": "import ${0:path} from '@/$1'"
    // "body": "import ${0:path} from '@/${1:app/}'"
    // "body": "import ${0:path} from '@/app/$1'"
  },

  "ieq": {
    "prefix": "ieq",
    "body": "type IsEqual<A, B> = (<T>() => T extends A ? 1 : 2) extends <T>() => T extends B ? 1 : 2 ? true : false\n"
  },
  "neq": {
    "prefix": "neq",
    "body": "type NotEqual<A, B> = (<T>() => T extends A ? 1 : 2) extends <T>() => T extends B ? 1 : 2 ? false : true\n"
  },

  "ec": {
    "prefix": "ec",
    "body": "${1|export const,export class|} "
  },
  "epl": {
    "prefix": "epl",
    "body": "export let "
  },
  "ept": {
    "prefix": "ept",
    "body": "export type "
  },

  "ep": {
    "prefix": "ep",
    // "body": "export ${0:path} from '$1'"
    // "body": "export * from '$0'"
    "body": "${1|export * from ,extends Pick|}"
  },

  "import": {
    "prefix": "ip",
    // import rule, { RULE_NAME } from './generic-spacing'

    // "body": "import {$0} from '$1'"  利用 ctrl+shift+\ 跳到大括号前补充, 会变成下面这样
    // import mongoose from "mongoose"{Schema} from 'mongoose'

    // "body": "import $0 from '$1'" // 需要占位符
    "body": "import ${0:Placeholder} from '$1'"
  },
  "import * as": {
    "prefix": "ia",
    "body": "import * as $0 from '$1'"

    // 不可以这样写, 会没有提示
    // "body": "import * as ${2:$1} from '$1'"
  },
  "iat": {
    "prefix": "iat",
    "body": "import type * as $0 from '$1'"
  },
  "import type": {
    "prefix": "ipt",
    "body": "import type {$0} from '$1'"
  },

  "tz": {
    "prefix": "tz",
    "body": "// @ts-expect-error "
  },
  "fj": {
    "prefix": "fj",
    "body": [";(($0) => {\n})()"]
  },
  "fr": {
    "prefix": "fr",
    // "body": [";(function ($0) {\n})()"]
    "body": [";(function () {\n\t$0\n})()"]
  },
  "ajr": {
    "prefix": "ajr",
    "body": [";(async ($0) => {\n})()"]
  },
  "afr": {
    "prefix": "afr",

    // "body": ["${1|;,await |}(async function ($0) {\n})()"]
    // "body": [";(async function ($0) {\n})()"]
    "body": [";(async function () {\n\t$0\n})()"]

    // "body": "if $2${1| ,;|} err != nil {\n\n}\n"
  },
  "aaf": {
    "prefix": "aaf",
    // "body": "await (async function ($1$0) {\n})($1)"
    // "body": "await (async function ($1) {\n\t$0\n})($1)"
    "body": "await (async function () {\n\t$0\n})()"
    // // "body": "await (async function ($0) {\n})($0)"
  },
  "ud": {
    "prefix": "ud",
    "body": "undefined"
  },
  "y": {
    "prefix": "y",
    "body": "yield "
  },
  "fop": {
    "prefix": "fop",
    // for (pos = start + 1; pos <= max; pos++) { 无 let
    // for (pos = start + 1; pos <= max; pos++) { 可能是 <=
    // for (let i = 1; i < params.length; i++) {  从 1 开始

    // 占位符太多了也不好
    "body": "for (let ${1:i} = 0; ${1:i} <$0; ${1:i}++) {\n}"
    // "body": "for (${1|let , |}${2:i} = ${3:0}; ${2:i} <$0; ${2:i}++) {\n}"
  },
  "foj": {
    "prefix": "foj",
    // import { readFileSync } from 'fs'; 冲突

    // for (let i = topLabel; i >= 0; i -= 1000) {
    // "body": "for (let ${1:i} = 0; ${1:i} >$0; ${1:i}--) {\n}"
    "body": "for (let ${1:i} = $0; ${1:i} >$2; ${1:i}--) {\n}"
    // "body": "for (let ${1:i} = $0; ${1:i} > -1; ${1:i}--) {\n}"
  },
  "cv": {
    "prefix": "cv",
    "body": "${`%${$0}%`}"
  },
  "fao": {
    "prefix": "fao",
    // for (const key in overrides) { 也可能是 in

    // 先填 for 变量, 不然没有提示
    "body": "for await (const $0) {\n}"
  },
  "fo": {
    "prefix": "fo",
    // for (const key in overrides) { 也可能是 in

    // 先填 for 变量, 不然没有提示
    "body": "for (const $0) {\n}"
  },
  "namespace": {
    "prefix": "sp",
    "body": "namespace "
  },
  // "Person": {
  //   "prefix": "pp",
  //   "body": "interface Person { name: string; age: number }"
  // },
  "ap": {
    "prefix": "ap",
    // const data = await Promise.all([
    "body": "await Promise."
  },
  "kt": {
    "prefix": "kt",
    // type ac = keyof typeof iconMap
    "body": "keyof typeof "
  },
  "nu": {
    "prefix": "nu",
    "body": "number"
  },
  "n": {
    "prefix": "n",
    "body": "new "
  },
  "ah": {
    "prefix": "ah",
    "body": "as HTMLElement"
  },
  "np": {
    "prefix": "np",
    // const prom = new Promise<number>((resolve, reject) => { 带类型

    // 参数名不一样, 这样就需要 $2 停留在小括号内, 不然会直接跑到 $0
    // new Promise<NodeWorker>((r, rj) => {
    // "body": ["new Promise$0 ((${1|resolve\\, reject,resolve, |}$2) => {", "})"]
    // "body": ["new Promise$0 ((${1|resolve,resolve\\, reject|}) => {", "})"]

    // "body": ["new Promise$0((resolve, reject) => {", "})"]
    "body": ["new Promise((resolve, reject) => {", "\t$0", "})"]

    // "body": "new Promise"
    // "body": ["new Promise$0 ((${1|resolve\\, reject,resolve, |}) => {", "})"]
    // "body": ["new Promise((${1|resolve\\, reject,resolve|}) => $0)"]
  },
  "rnp": {
    "prefix": "rnp",
    // const prom = new Promise<number>((resolve, reject) => { 带类型

    // 参数名不一样, 这样就需要 $2 停留在小括号内, 不然会直接跑到 $0
    // new Promise<NodeWorker>((r, rj) => {

    // "body": ["new Promise$0 ((${1|resolve\\, reject,resolve, |}$2) => {", "})"]
    // "body": ["return new Promise((${1|resolve\\, reject,resolve|}) => $0)"]
    // "body": ["return new Promise((${1|resolve,resolve\\, reject|}) => $0)"]
    "body": ["return new Promise((resolve, reject) => $0)"]
    // "body": ["return new Promise((${1|re,re\\, rj|}) => $0)"]
  },
  "jt": {
    "prefix": "jt",
    "body": "($1) => $0"
  },
  "j": {
    "prefix": "j",
    "body": "($1) => $0"
  },

  "ai": {
    "prefix": "ai",
    "body": "await "
  },
  "async": {
    "prefix": "a", // a可以直接放在`f`前面 空格不需要
    // function sick() {}
    "body": "async "
  },
  "t": {
    "prefix": "t",
    "body": "true"
  },
  "pu": {
    "prefix": "pu",
    "body": "public "
  },
  "pr": {
    "prefix": "pr",
    "body": "private "
  },
  "pt": {
    "prefix": "pt",
    "body": "protected "
  },
  // "h": {
  //   "prefix": "h",
  //   // $1 后面留个空格是为了方便加泛型 <>
  //   // "body": "$1 ($2): "
  //   "body": "$1 ($2): "
  // },
  // "vo": {
  //   "prefix": "vo",
  //   "body": "void "
  // },

  "fn": {
    "prefix": "fn",
    "body": "function $0 {\n}"
  },
  "af": {
    "prefix": "af",
    "body": "async function $0 {\n}"
  },
  "f": {
    "prefix": "f",
    "body": "false"
  },
  "typeof": {
    "prefix": "tp",
    "body": "typeof "
  },
  "const": {
    "prefix": "c",
    "body": "const "
  },
  "return": {
    "prefix": "r",
    "body": "return "
  },
  "class": {
    "prefix": "cl",
    "body": "class $0 {\n}"
  },
  "lo": {
    "prefix": "l",
    "body": "console.log($0)"
  },
  "cd": {
    "prefix": "cd",
    "body": "console.dir($0, { depth: null })"
  },
  "co": {
    "prefix": "co",
    "body": "console."
  }
}
